// Mocks generated by Mockito 5.4.5 from annotations
// in solid_test_task/test/color_gallery_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:solid_test_task/domain/model/color_model.dart' as _i4;
import 'package:solid_test_task/domain/repository/color_repository.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ColorRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockColorRepository extends _i1.Mock implements _i2.ColorRepository {
  MockColorRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> insertColor(Map<String, dynamic>? colorMap) =>
      (super.noSuchMethod(
            Invocation.method(#insertColor, [colorMap]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.ColorModel>> getColors() =>
      (super.noSuchMethod(
            Invocation.method(#getColors, []),
            returnValue: _i3.Future<List<_i4.ColorModel>>.value(
              <_i4.ColorModel>[],
            ),
          )
          as _i3.Future<List<_i4.ColorModel>>);

  @override
  _i3.Future<void> deleteColor(String? hexString) =>
      (super.noSuchMethod(
            Invocation.method(#deleteColor, [hexString]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> editColor({
    required String? oldHexString,
    required Map<String, dynamic>? colorMap,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#editColor, [], {
              #oldHexString: oldHexString,
              #colorMap: colorMap,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
